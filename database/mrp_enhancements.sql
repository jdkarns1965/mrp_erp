-- MRP Enhancement Schema
-- Adds missing tables and fields for complete MRP functionality
-- Version: 1.0
-- Date: 2025-08-18

USE mrp_erp;

-- =====================================================
-- ALTER EXISTING TABLES
-- =====================================================

-- Add lead_time_days to products table if not exists
ALTER TABLE products 
ADD COLUMN IF NOT EXISTS lead_time_days INT DEFAULT 0 AFTER safety_stock_qty,
ADD COLUMN IF NOT EXISTS lot_size_rule ENUM('fixed', 'lot-for-lot', 'min-max', 'economic') DEFAULT 'lot-for-lot' AFTER lead_time_days,
ADD COLUMN IF NOT EXISTS lot_size_qty DECIMAL(15,4) DEFAULT 0 AFTER lot_size_rule,
ADD COLUMN IF NOT EXISTS lot_size_multiple DECIMAL(15,4) DEFAULT 1 AFTER lot_size_qty;

-- Add safety stock to materials table if not exists
ALTER TABLE materials
ADD COLUMN IF NOT EXISTS safety_stock_qty DECIMAL(15,4) DEFAULT 0 AFTER reorder_point,
ADD COLUMN IF NOT EXISTS lot_size_rule ENUM('fixed', 'lot-for-lot', 'min-max', 'economic') DEFAULT 'lot-for-lot' AFTER lead_time_days,
ADD COLUMN IF NOT EXISTS lot_size_qty DECIMAL(15,4) DEFAULT 0 AFTER lot_size_rule,
ADD COLUMN IF NOT EXISTS lot_size_multiple DECIMAL(15,4) DEFAULT 1 AFTER lot_size_qty,
ADD COLUMN IF NOT EXISTS order_cost DECIMAL(15,4) DEFAULT 0 AFTER cost_per_unit,
ADD COLUMN IF NOT EXISTS carrying_cost_percent DECIMAL(5,2) DEFAULT 20 AFTER order_cost;

-- =====================================================
-- NEW TABLES FOR MRP FUNCTIONALITY
-- =====================================================

-- Planning Calendar (defines planning periods/buckets)
CREATE TABLE IF NOT EXISTS planning_calendar (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    period_type ENUM('daily', 'weekly', 'monthly') NOT NULL DEFAULT 'weekly',
    period_name VARCHAR(50) NOT NULL, -- e.g., "Week 1", "Jan 2025"
    is_working_period BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY unique_period (period_start, period_end),
    INDEX idx_period_dates (period_start, period_end),
    INDEX idx_period_type (period_type)
) ENGINE=InnoDB;

-- Master Production Schedule (MPS)
CREATE TABLE IF NOT EXISTS master_production_schedule (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    product_id INT UNSIGNED NOT NULL,
    period_id INT UNSIGNED NOT NULL,
    demand_qty DECIMAL(15,4) NOT NULL DEFAULT 0 COMMENT 'Forecasted demand',
    firm_planned_qty DECIMAL(15,4) NOT NULL DEFAULT 0 COMMENT 'Firm planned production',
    scheduled_qty DECIMAL(15,4) NOT NULL DEFAULT 0 COMMENT 'Actually scheduled production',
    available_to_promise DECIMAL(15,4) DEFAULT 0,
    status ENUM('draft', 'firm', 'released', 'completed') DEFAULT 'draft',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by VARCHAR(100),
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    FOREIGN KEY (period_id) REFERENCES planning_calendar(id) ON DELETE CASCADE,
    UNIQUE KEY unique_mps (product_id, period_id),
    INDEX idx_mps_status (status),
    INDEX idx_mps_period (period_id)
) ENGINE=InnoDB;

-- Purchase Order Suggestions (generated by MRP)
CREATE TABLE IF NOT EXISTS purchase_order_suggestions (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    mrp_run_id INT UNSIGNED NOT NULL COMMENT 'Links to MRP run session',
    material_id INT UNSIGNED NOT NULL,
    supplier_id INT UNSIGNED,
    suggested_order_date DATE NOT NULL,
    required_date DATE NOT NULL,
    quantity DECIMAL(15,4) NOT NULL,
    uom_id INT UNSIGNED NOT NULL,
    unit_cost DECIMAL(15,4),
    total_cost DECIMAL(15,4),
    priority ENUM('urgent', 'high', 'normal', 'low') DEFAULT 'normal',
    status ENUM('suggested', 'approved', 'converted', 'cancelled') DEFAULT 'suggested',
    po_number VARCHAR(50) COMMENT 'If converted to actual PO',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (material_id) REFERENCES materials(id) ON DELETE CASCADE,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE SET NULL,
    FOREIGN KEY (uom_id) REFERENCES units_of_measure(id) ON DELETE RESTRICT,
    INDEX idx_po_sugg_status (status),
    INDEX idx_po_sugg_dates (suggested_order_date, required_date),
    INDEX idx_po_sugg_priority (priority),
    INDEX idx_mrp_run (mrp_run_id)
) ENGINE=InnoDB;

-- Production Order Suggestions (generated by MRP for sub-assemblies)
CREATE TABLE IF NOT EXISTS production_order_suggestions (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    mrp_run_id INT UNSIGNED NOT NULL COMMENT 'Links to MRP run session',
    product_id INT UNSIGNED NOT NULL,
    suggested_start_date DATE NOT NULL,
    suggested_end_date DATE NOT NULL,
    required_date DATE NOT NULL,
    quantity DECIMAL(15,4) NOT NULL,
    uom_id INT UNSIGNED NOT NULL,
    priority ENUM('urgent', 'high', 'normal', 'low') DEFAULT 'normal',
    status ENUM('suggested', 'approved', 'released', 'cancelled') DEFAULT 'suggested',
    production_order_number VARCHAR(50) COMMENT 'If converted to actual production order',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    FOREIGN KEY (uom_id) REFERENCES units_of_measure(id) ON DELETE RESTRICT,
    INDEX idx_prod_sugg_status (status),
    INDEX idx_prod_sugg_dates (suggested_start_date, required_date),
    INDEX idx_prod_sugg_priority (priority),
    INDEX idx_mrp_run (mrp_run_id)
) ENGINE=InnoDB;

-- MRP Run Sessions (tracks each MRP calculation run)
CREATE TABLE IF NOT EXISTS mrp_runs (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    run_date DATETIME NOT NULL,
    run_type ENUM('regenerative', 'net-change') NOT NULL DEFAULT 'regenerative',
    planning_horizon_days INT NOT NULL DEFAULT 90,
    status ENUM('running', 'completed', 'failed') NOT NULL DEFAULT 'running',
    total_products INT DEFAULT 0,
    total_materials INT DEFAULT 0,
    total_po_suggestions INT DEFAULT 0,
    total_prod_suggestions INT DEFAULT 0,
    execution_time_seconds DECIMAL(10,2),
    run_by VARCHAR(100),
    parameters JSON COMMENT 'Stores run parameters like filters, options',
    error_log TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_run_date (run_date),
    INDEX idx_run_status (status)
) ENGINE=InnoDB;

-- MRP Pegging (links demand to supply for traceability)
CREATE TABLE IF NOT EXISTS mrp_pegging (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    mrp_run_id INT UNSIGNED NOT NULL,
    demand_type ENUM('customer_order', 'forecast', 'safety_stock') NOT NULL,
    demand_id INT UNSIGNED NOT NULL COMMENT 'ID of customer_order, mps, etc.',
    supply_type ENUM('inventory', 'po_suggestion', 'prod_suggestion', 'existing_po') NOT NULL,
    supply_id INT UNSIGNED NOT NULL COMMENT 'ID of inventory, suggestion, etc.',
    item_type ENUM('material', 'product') NOT NULL,
    item_id INT UNSIGNED NOT NULL,
    quantity DECIMAL(15,4) NOT NULL,
    pegging_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (mrp_run_id) REFERENCES mrp_runs(id) ON DELETE CASCADE,
    INDEX idx_pegging_demand (demand_type, demand_id),
    INDEX idx_pegging_supply (supply_type, supply_id),
    INDEX idx_pegging_item (item_type, item_id)
) ENGINE=InnoDB;

-- Planning Parameters (system-wide MRP settings)
CREATE TABLE IF NOT EXISTS planning_parameters (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    parameter_name VARCHAR(50) NOT NULL UNIQUE,
    parameter_value VARCHAR(255) NOT NULL,
    parameter_type ENUM('number', 'text', 'boolean', 'date') NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Insert default planning parameters
INSERT INTO planning_parameters (parameter_name, parameter_value, parameter_type, description) VALUES
('default_planning_horizon_days', '90', 'number', 'Default number of days to plan ahead'),
('default_period_type', 'weekly', 'text', 'Default planning period type (daily/weekly/monthly)'),
('include_safety_stock', 'true', 'boolean', 'Include safety stock in MRP calculations'),
('working_days_per_week', '5', 'number', 'Number of working days per week'),
('allow_partial_fulfillment', 'false', 'boolean', 'Allow partial order fulfillment'),
('auto_firm_horizon_days', '14', 'number', 'Days within which to auto-firm suggestions')
ON DUPLICATE KEY UPDATE 
    parameter_value = VALUES(parameter_value),
    updated_at = CURRENT_TIMESTAMP;

-- Generate initial planning calendar (next 13 weeks)
INSERT INTO planning_calendar (period_start, period_end, period_type, period_name, is_working_period)
SELECT 
    DATE_ADD(CURDATE(), INTERVAL (week_num * 7 - WEEKDAY(CURDATE())) DAY) as period_start,
    DATE_ADD(CURDATE(), INTERVAL (week_num * 7 - WEEKDAY(CURDATE()) + 6) DAY) as period_end,
    'weekly' as period_type,
    CONCAT('Week ', week_num, ' - ', YEAR(DATE_ADD(CURDATE(), INTERVAL (week_num * 7) DAY))) as period_name,
    TRUE as is_working_period
FROM (
    SELECT 0 as week_num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 
    UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7
    UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12
) weeks
WHERE NOT EXISTS (
    SELECT 1 FROM planning_calendar 
    WHERE period_start = DATE_ADD(CURDATE(), INTERVAL (week_num * 7 - WEEKDAY(CURDATE())) DAY)
);

-- Create indexes for better MRP performance
CREATE INDEX IF NOT EXISTS idx_materials_planning ON materials(lead_time_days, safety_stock_qty, reorder_point);
CREATE INDEX IF NOT EXISTS idx_products_planning ON products(lead_time_days, safety_stock_qty);

DELIMITER $$

-- Function to calculate Economic Order Quantity (EOQ)
CREATE FUNCTION IF NOT EXISTS calculate_eoq(
    annual_demand DECIMAL(15,4),
    order_cost DECIMAL(15,4),
    carrying_cost_percent DECIMAL(5,2),
    unit_cost DECIMAL(15,4)
) RETURNS DECIMAL(15,4)
DETERMINISTIC
READS SQL DATA
BEGIN
    DECLARE eoq DECIMAL(15,4);
    
    IF annual_demand <= 0 OR order_cost <= 0 OR carrying_cost_percent <= 0 OR unit_cost <= 0 THEN
        RETURN 0;
    END IF;
    
    -- EOQ = sqrt((2 * D * S) / (H * C))
    -- D = annual demand, S = order cost, H = carrying cost %, C = unit cost
    SET eoq = SQRT((2 * annual_demand * order_cost) / ((carrying_cost_percent / 100) * unit_cost));
    
    RETURN ROUND(eoq, 0);
END$$

-- Function to calculate next working date considering weekends
CREATE FUNCTION IF NOT EXISTS get_working_date(
    start_date DATE,
    lead_days INT
) RETURNS DATE
DETERMINISTIC
BEGIN
    DECLARE target_date DATE;
    DECLARE days_added INT DEFAULT 0;
    DECLARE working_days INT DEFAULT 0;
    
    SET target_date = start_date;
    
    WHILE working_days < lead_days DO
        SET target_date = DATE_ADD(target_date, INTERVAL 1 DAY);
        -- Skip weekends (Saturday = 6, Sunday = 0)
        IF DAYOFWEEK(target_date) NOT IN (1, 7) THEN
            SET working_days = working_days + 1;
        END IF;
    END WHILE;
    
    RETURN target_date;
END$$

DELIMITER ;

-- Add triggers to update MRP requirements when inventory changes
DELIMITER $$

CREATE TRIGGER IF NOT EXISTS after_inventory_update
AFTER UPDATE ON inventory
FOR EACH ROW
BEGIN
    -- Log significant inventory changes that might affect MRP
    IF ABS(NEW.quantity - OLD.quantity) > 0.01 THEN
        INSERT INTO inventory_transactions (
            transaction_type,
            transaction_date,
            item_type,
            item_id,
            lot_number,
            from_location_id,
            to_location_id,
            quantity,
            uom_id,
            reference_type,
            reference_number,
            notes
        ) VALUES (
            'adjustment',
            NOW(),
            NEW.item_type,
            NEW.item_id,
            NEW.lot_number,
            NEW.location_id,
            NEW.location_id,
            NEW.quantity - OLD.quantity,
            NEW.uom_id,
            'SYSTEM',
            'AUTO-TRACKED',
            'Automatic tracking of inventory change'
        );
    END IF;
END$$

DELIMITER ;

-- Create view for current stock levels (aggregated by item)
CREATE OR REPLACE VIEW v_current_stock AS
SELECT 
    item_type,
    item_id,
    CASE 
        WHEN item_type = 'material' THEN m.material_code
        WHEN item_type = 'product' THEN p.product_code
    END as item_code,
    CASE 
        WHEN item_type = 'material' THEN m.name
        WHEN item_type = 'product' THEN p.name
    END as item_name,
    SUM(i.quantity) as total_quantity,
    SUM(i.reserved_quantity) as total_reserved,
    SUM(i.quantity - i.reserved_quantity) as available_quantity,
    CASE 
        WHEN item_type = 'material' THEN m.safety_stock_qty
        WHEN item_type = 'product' THEN p.safety_stock_qty
    END as safety_stock,
    CASE 
        WHEN item_type = 'material' THEN m.reorder_point
        WHEN item_type = 'product' THEN NULL
    END as reorder_point,
    CASE 
        WHEN item_type = 'material' THEN m.lead_time_days
        WHEN item_type = 'product' THEN p.lead_time_days
    END as lead_time_days
FROM inventory i
LEFT JOIN materials m ON i.item_type = 'material' AND i.item_id = m.id
LEFT JOIN products p ON i.item_type = 'product' AND i.item_id = p.id
WHERE i.status = 'available'
GROUP BY item_type, item_id;

-- Create view for MRP actionable items
CREATE OR REPLACE VIEW v_mrp_actions AS
SELECT 
    'Purchase' as action_type,
    pos.material_id as item_id,
    m.material_code as item_code,
    m.name as item_name,
    pos.quantity,
    pos.suggested_order_date,
    pos.required_date,
    pos.priority,
    pos.status,
    DATEDIFF(pos.suggested_order_date, CURDATE()) as days_until_order,
    CASE 
        WHEN DATEDIFF(pos.suggested_order_date, CURDATE()) < 0 THEN 'OVERDUE'
        WHEN DATEDIFF(pos.suggested_order_date, CURDATE()) <= 3 THEN 'URGENT'
        WHEN DATEDIFF(pos.suggested_order_date, CURDATE()) <= 7 THEN 'SOON'
        ELSE 'NORMAL'
    END as urgency
FROM purchase_order_suggestions pos
JOIN materials m ON pos.material_id = m.id
WHERE pos.status = 'suggested'

UNION ALL

SELECT 
    'Production' as action_type,
    pros.product_id as item_id,
    p.product_code as item_code,
    p.name as item_name,
    pros.quantity,
    pros.suggested_start_date as suggested_order_date,
    pros.required_date,
    pros.priority,
    pros.status,
    DATEDIFF(pros.suggested_start_date, CURDATE()) as days_until_order,
    CASE 
        WHEN DATEDIFF(pros.suggested_start_date, CURDATE()) < 0 THEN 'OVERDUE'
        WHEN DATEDIFF(pros.suggested_start_date, CURDATE()) <= 3 THEN 'URGENT'
        WHEN DATEDIFF(pros.suggested_start_date, CURDATE()) <= 7 THEN 'SOON'
        ELSE 'NORMAL'
    END as urgency
FROM production_order_suggestions pros
JOIN products p ON pros.product_id = p.id
WHERE pros.status = 'suggested'
ORDER BY urgency DESC, suggested_order_date ASC;

COMMIT;